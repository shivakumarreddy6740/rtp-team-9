import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime

df=pd.read_csv('set2.csv')

df.head()

df.tail()

df.isnull().sum()

df.duplicated().sum()

df.info()

df.shape

df.describe()

df.head()

df['Order Date and Time'] = pd.to_datetime(df['Order Date and Time'], format='%d-%m-%Y %H:%M', errors='coerce')

df['Order Date and Time'] = pd.to_datetime(df['Order Date and Time'], dayfirst=True, errors='coerce')

df['Order Date and Time']=pd.to_datetime(df['Order Date and Time'])

df['Delivery Date and Time'] = pd.to_datetime(df['Delivery Date and Time'], format='%d-%m-%Y %H:%M', errors='coerce')
df['Delivery Date and Time'] = pd.to_datetime(df['Delivery Date and Time'], dayfirst=True, errors='coerce')
df['Delivery Date and Time']=pd.to_datetime(df['Delivery Date and Time'])

df.info()

def extract_discount(discount_str):
    if isinstance(discount_str,str):
        if 'off' in discount_str:
            return float(discount_str.split(' ')[0])
        elif '%' in discount_str:
            return float(discount_str.split('%')[0])
    elif isinstance(discount_str, (int, float)):
        return discount_str
    return 0.0
df['discount percentage']=df['Discounts and Offers'].apply(extract_discount)

df['discount Amount']=df.apply(lambda x: (x['Order Value']*x['discount percentage']/100)
                                                  if x['discount percentage']>1
                                                  else x['discount percentage'],axis=1)

df['discount Amount'] = df.apply(lambda x: x['discount Amount'] if x['discount percentage'] <= 1
                                                   else (x['Order Value'] * x['discount percentage'] / 100), axis=1)

print(df[['Order Value','Discounts and Offers','discount percentage','discount Amount']].head())

df.info()

df['revenue']=df['Commission Fee']
df['Total Costs']=df['Delivery Fee']+df['Payment Processing Fee']+df['discount Amount']
df['profit']=df['revenue']-df['Total Costs']

total_orders=df.shape[0]
total_revenue=df['revenue'].sum()
total_costs=df['Total Costs'].sum()
total_profit=df['profit'].sum()

overall_metrics = {
    "Total Orders": total_orders,
    "Total Revenue": total_revenue,
    "Total Costs": total_costs,
    "Total Profit": total_profit
}

print(overall_metrics)

plt.figure(figsize=(10,10))
plt.hist(df['profit'],bins=50,color='skyblue',edgecolor='black')
plt.title('Profit Distribution per Order in Food Delivery')
plt.xlabel('Profit')
plt.ylabel('Number of Orders')
plt.axvline(df['profit'].mean(),color='red',linestyle='dashed',linewidth=1)
plt.show()

costs_breakdown=df[['Delivery Fee','Payment Processing Fee','discount Amount']].sum()

plt.figure(figsize=(6,6))
plt.pie(costs_breakdown,labels=costs_breakdown.index,autopct='%1.1f%%',colors=['gold','tomato','lightblue'])
plt.title('Proportion of total costs in Food delivery')
plt.show()

totals=["Total Revenue","Total Costs","Total Profit"]
values=[total_revenue,total_costs,total_profit]

plt.bar(totals,values,color=['green','pink','lightblue'])
plt.title('Total Revenue, Costs and profit')
plt.ylabel('Amount(INR)')
plt.show()

profitable_orders=df[df['profit']>0]
profitable_orders['commision_pct']=(profitable_orders['Commission Fee']/profitable_orders['Order Value'])*100
profitable_orders['effective discount_pct']=(profitable_orders['discount Amount']/profitable_orders['Order Value'])*100

new_avg_comm_pct=profitable_orders['commision_pct'].mean()
new_avg_disc_pct=profitable_orders['effective discount_pct'].mean()
print(new_avg_comm_pct,new_avg_disc_pct)

recommended_commission_percentage = 37.0  
recommended_discount_percentage = 10.0  

df['simulated_commission_fee']=df['Order Value']*recommended_commission_percentage/100
df['simulated_discount_amnt']=df['Order Value']*recommended_discount_percentage/100

df['simulated_total_cost']=df['Delivery Fee'] +df['Payment Processing Fee'] +df['simulated_discount_amnt']
df['simulated_total_profit']=df['simulated_commission_fee']-df['simulated_total_cost']  

df[['simulated_total_cost','simulated_total_profit']].sum()

import seaborn as sns
plt.figure(figsize=(14,7))
sns.kdeplot(df['profit'],label='Actual Profitability',fill=True,alpha=0.5)
sns.kdeplot(df['simulated_total_profit'],label='Estimated Profitability with Recommended Rates',fill=True,alpha=0.5)
plt.title('Comparison of Profitability in Food Delivery: Actual vs. Recommended Discounts and Commissions')
plt.xlabel('Profit')
plt.ylabel('Density')
plt.legend(loc='upper left')
plt.show()
